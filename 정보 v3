import requests
from datetime import datetime
import pytz

# 기본 설정
hours = [0, 3, 6, 9, 12, 15, 18, 21]
base_demand = [50, 48, 55, 70, 90, 88, 75, 60]
LCOE_solar, LCOE_wind, LCOE_nuclear, LCOE_storage = 40, 35, 50, 10
nuclear_output = 35
storage_capacity = 50
storage = 0  # 초기 저장량

# PM2.5 영향 계산
def calculate_pm25_impact(pm25):
    return max(0.5, 1 - 0.005 * (pm25 / 10))

weather_impact = {"맑음": 1.0, "흐림": 0.75, "비": 0.5}

# 실제 날씨 데이터 가져오기 (온양6동 위도/경도)
def get_real_weather_data():
    try:
        lat, lon = 36.7581, 127.0178
        timezone = "Asia/Seoul"
        weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&hourly=temperature_2m,shortwave_radiation,windspeed_10m,weathercode&timezone={timezone}"
        response = requests.get(weather_url)
        data = response.json()
        weather_data = data["hourly"]

        now = datetime.now(pytz.timezone(timezone))
        index_map = {hour: None for hour in hours}
        for i, t in enumerate(weather_data["time"]):
            hour = int(t[-5:-3])
            if hour in index_map and index_map[hour] is None:
                index_map[hour] = i

        idx_list = [index_map[h] for h in hours]
        temp = [weather_data["temperature_2m"][i] for i in idx_list]
        solar_rad = [weather_data["shortwave_radiation"][i] for i in idx_list]
        wind = [weather_data["windspeed_10m"][i] for i in idx_list]
        code_map = {0: "맑음", 1: "흐림", 2: "비", 3: "눈", 45: "흐림", 51: "비"}
        weather = [code_map.get(weather_data["weathercode"][i], "맑음") for i in idx_list]
        pm25 = [30] * 8  # 향후 실제 연동 가능

        return temp, solar_rad, wind, pm25, weather
    except Exception as e:
        print("데이터 수집 오류:", e)
        return [25]*8, [500]*8, [5]*8, [30]*8, ["맑음"]*8

# 시나리오 정의
def get_scenario_data(name):
    if name == "맑은 날":
        return [25]*8, [800 if 6 <= h <= 18 else 0 for h in hours], [4]*8, [20]*8, ["맑음"]*8, base_demand
    elif name == "폭풍우":
        return [20]*8, [0]*8, [12]*8, [80]*8, ["비"]*8, base_demand
    elif name == "에너지 공급 취약":
        return [32]*8, [100]*8, [3.2]*8, [120]*8, ["흐림"]*8, [int(d*1.4) for d in base_demand]
    elif name == "흐린 날":
        return [18]*8, [300 if 6 <= h <= 18 else 0 for h in hours], [4]*8, [50]*8, ["흐림"]*8, base_demand
    elif name == "눈 내리는 날":
        return [-2]*8, [100 if 6 <= h <= 18 else 0 for h in hours], [7]*8, [30]*8, ["흐림"]*8, [int(d*1.1) for d in base_demand]
    else:
        return get_real_weather_data() + (base_demand,)

# 재생에너지 발전량 계산
def calculate_renewable_energy(temp, solar_rad, wind_speed, pm25, weather):
    solar, wind = [], []
    for i in range(8):
        base = max(0, (solar_rad[i] / 1000) * 50 * (1 - 0.005 * (temp[i] - 25)))
        eff = calculate_pm25_impact(pm25[i]) * weather_impact.get(weather[i], 1.0)
        solar.append(base * eff)
        wind.append(0 if wind_speed[i] < 3 or wind_speed[i] > 25 else 30 * (wind_speed[i] / 10) ** 3)
    return solar, wind

# 에너지 믹스 최적화
def optimize_energy_mix(solar, wind, demand):
    global storage
    optimized_solar, optimized_wind, storage_usage = [], [], []
    ess_storage_log = []
    total_cost = 0

    for i in range(8):
        required = demand[i] - nuclear_output
        available = solar[i] + wind[i]

        if available < required:
            used = min(storage, required - available)
            storage -= used
            storage_usage.append(used)
        else:
            surplus = available - required
            if storage + surplus <= storage_capacity:
                storage += surplus
            else:
                surplus -= (storage_capacity - storage)
                storage = storage_capacity
            ratio_s = solar[i] / available if available else 0
            ratio_w = wind[i] / available if available else 0
            solar[i] -= surplus * ratio_s
            wind[i] -= surplus * ratio_w
            storage_usage.append(0)

        optimized_solar.append(solar[i])
        optimized_wind.append(wind[i])
        ess_storage_log.append(storage)

        total_cost += (solar[i] * LCOE_solar) + (wind[i] * LCOE_wind) + (nuclear_output * LCOE_nuclear) + (storage_usage[i] * LCOE_storage)

    return optimized_solar, optimized_wind, total_cost, storage_usage, ess_storage_log

# 실행
print("\n🌍 시나리오를 선택하세요:")
scenarios = ["맑은 날", "폭풍우", "에너지 공급 취약", "흐린 날", "눈 내리는 날"]
for idx, name in enumerate(scenarios, 1):
    print(f"{idx}. {name}")
print("6. 오늘 날씨")

choice = input("\n👉 선택 (1~6): ")

if choice in [str(i) for i in range(1, 6)]:
    temp, solar_rad, wind_spd, pm25, weather, demand = get_scenario_data(scenarios[int(choice)-1])
elif choice == "6":
    temp, solar_rad, wind_spd, pm25, weather = get_real_weather_data()
    demand = base_demand
else:
    print("잘못된 입력입니다.")
    temp, solar_rad, wind_spd, pm25, weather = get_real_weather_data()
    demand = base_demand

# 결과 출력
print("\n⚡ 최적 에너지 조합 (3시간 간격) ⚡")
for i in range(8):
    total = solar_opt[i] + wind_opt[i] + nuclear_output
    print(f"{hours[i]:02d}시 - 태양광: {solar_opt[i]:.1f}MW, 풍력: {wind_opt[i]:.1f}MW, 원자력: {nuclear_output:.1f}MW, 총: {total:.1f}MW")

print(f"\n💰 총 발전 비용: {cost_opt:,.0f} 원")

print("\n🔋 ESS 저장량 및 사용량 (3시간 간격)")
for i in range(8):
    print(f"{hours[i]:02d}시 - 사용량: {storage_used[i]:.1f}MW, 저장량: {ess_storage[i]:.1f}MW")

print("✅ 기상청 API 데이터 확인")
print("🌡️ 기온:", temp)
print("☀️ 일사량:", solar_rad)
print("💨 풍속:", wind_spd)
print("🌫️ PM2.5:", pm25)
print("🌦️ 날씨 상태:", weather)
